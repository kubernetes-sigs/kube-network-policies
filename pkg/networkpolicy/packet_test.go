package networkpolicy

// Test data is generated from captured pcap file using:
// https://github.com/uablrek/pcap2go
// The used pcap files are stored in test-data/ and packet variables
// are commented with the originating pcap file

import (
	"net"
	"syscall"
	"testing"

	v1 "k8s.io/api/core/v1"
)

func TestUDPFragmentIPv6(t *testing.T) {
	// The test-data contains 3 packets:
	// 1. First fragment of an UDP packet
	// 2. Fragment containing the rest of the UDP packet
	// 3. An unfragmented reply UDP packet
	// We expect:
	// 1. Identified as an UDP packet
	// 2. Unknown protocol (44)
	// 3. Identified as an UDP packet
	tests := []struct {
		name     string
		input    []byte
		expected packet
	}{
		{
			name:  "UDP first fragment",
			input: packetsUDPFragIPv6[0],
			expected: packet{
				family:  v1.IPv6Protocol,
				proto:   v1.ProtocolUDP,
				ipproto: syscall.IPPROTO_UDP,
				dstIP:   net.ParseIP("fd00::c0a8:101"),
				dstPort: 5001,
			},
		},
		{
			name:  "UDP not-first fragment",
			input: packetsUDPFragIPv6[1],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_FRAGMENT,
				dstIP:   net.ParseIP("fd00::c0a8:101"),
			},
		},
		{
			name:  "UDP packet (un-fragmented)",
			input: packetsUDPFragIPv6[2],
			expected: packet{
				family:  v1.IPv6Protocol,
				proto:   v1.ProtocolUDP,
				ipproto: syscall.IPPROTO_UDP,
				srcIP:   net.ParseIP("fd00::c0a8:101"),
				srcPort: 5001,
			},
		},
	}
	for _, tc := range tests {
		packet, err := parsePacket(tc.input)
		if err != nil {
			t.Fatalf("%s: unexpected error: %v", tc.name, err)
		}
		comparePacket(t, tc.name, tc.expected, packet)
	}
}

func TestTCPIPv4(t *testing.T) {
	// A normal TCP session with IPv4
	tests := []struct {
		name     string
		input    []byte
		err      bool
		expected packet
	}{
		{
			name:  "SYN",
			input: packetsTCPIPv4[0],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.1"),
				dstPort: 5001,
				srcIP:   net.ParseIP("192.168.1.201"),
			},
		},
		{
			name:  "SYN, ACK",
			input: packetsTCPIPv4[1],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.201"),
				srcIP:   net.ParseIP("192.168.1.1"),
				srcPort: 5001,
			},
		},
		{
			name:  "ACK 1",
			input: packetsTCPIPv4[2],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.1"),
				dstPort: 5001,
				srcIP:   net.ParseIP("192.168.1.2+1"),
			},
		},
		{
			name:  "PSH, ACK",
			input: packetsTCPIPv4[3],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.201"),
				srcIP:   net.ParseIP("192.168.1.1"),
				srcPort: 5001,
			},
		},
		{
			name:  "ACK 7",
			input: packetsTCPIPv4[4],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.1"),
				dstPort: 5001,
				srcIP:   net.ParseIP("192.168.1.2+1"),
			},
		},
		{
			name:  "FIN, ACK 7",
			input: packetsTCPIPv4[5],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.1"),
				dstPort: 5001,
				srcIP:   net.ParseIP("192.168.1.201"),
			},
		},
		{
			name:  "FIN, ACK 2",
			input: packetsTCPIPv4[6],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.201"),
				srcIP:   net.ParseIP("192.168.1.1"),
				srcPort: 5001,
			},
		},
		{
			name:  "ACK 8",
			input: packetsTCPIPv4[7],
			expected: packet{
				family:  v1.IPv4Protocol,
				proto:   v1.ProtocolTCP,
				ipproto: syscall.IPPROTO_TCP,
				dstIP:   net.ParseIP("192.168.1.1"),
				dstPort: 5001,
				srcIP:   net.ParseIP("192.168.1.201"),
			},
		},
	}
	for _, tc := range tests {
		packet, err := parsePacket(tc.input)
		if err != nil {
			if !tc.err {
				t.Fatalf("%s: unexpected error: %v", tc.name, err)
			}
			continue
		}
		comparePacket(t, tc.name, tc.expected, packet)
	}
}

func TestTooShortPackets(t *testing.T) {
	// Length of: IPv6Header+fragmentHeader+udpHeader = 40+8+8 = 56
	rawPacket := packetsUDPFragIPv6[0]
	var err error
	// Test a nil packet
	_, err = parsePacket(nil)
	if err == nil {
		t.Fatalf("No error when parsing a nil-packet")
	}
	for i := 0; i < 56; i++ {
		_, err = parsePacket(rawPacket[:i])
		if err == nil {
			t.Fatalf("No error when parsing a packet, length=%d", i)
		}
	}
	_, err = parsePacket(rawPacket[:56])
	if err != nil {
		t.Fatalf("Error when parsing a complete packet")
	}
}

func TestUDPDESTOPT1(t *testing.T) {
	// Similar to TestUDPFragmentIPv6, but a DESTOPT extension header
	// is inserted after the IPv6 header. Check with:
	// wireshark test-data/udp-dstopt1.pcap
	tests := []struct {
		name     string
		input    []byte
		expected packet
	}{
		{
			name:  "UDP first fragment with DESTOPT",
			input: packetsUDPDESTOPT1[0],
			expected: packet{
				family:  v1.IPv6Protocol,
				proto:   v1.ProtocolUDP,
				ipproto: syscall.IPPROTO_UDP,
				srcIP:   net.ParseIP("fd00::c0a8:2dd"),
				dstIP:   net.ParseIP("fd00::c0a8:101"),
				dstPort: 6000,
			},
		},
		{
			name:  "UDP not-first fragment with DESTOPT",
			input: packetsUDPDESTOPT1[1],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_FRAGMENT,
				srcIP:   net.ParseIP("fd00::c0a8:2dd"),
				dstIP:   net.ParseIP("fd00::c0a8:101"),
			},
		},
		{
			name:  "UDP reply first fragment",
			input: packetsUDPDESTOPT1[2],
			expected: packet{
				family:  v1.IPv6Protocol,
				proto:   v1.ProtocolUDP,
				ipproto: syscall.IPPROTO_UDP,
				dstIP:   net.ParseIP("fd00::c0a8:2dd"),
				srcIP:   net.ParseIP("fd00::c0a8:101"),
				srcPort: 6000,
			},
		},
		{
			name:  "UDP reply not-first fragment",
			input: packetsUDPDESTOPT1[3],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_FRAGMENT,
				dstIP:   net.ParseIP("fd00::c0a8:2dd"),
				srcIP:   net.ParseIP("fd00::c0a8:101"),
			},
		},
	}
	for _, tc := range tests {
		packet, err := parsePacket(tc.input)
		if err != nil {
			t.Fatalf("%s: unexpected error: %v", tc.name, err)
		}
		comparePacket(t, tc.name, tc.expected, packet)
	}
}

func TestUDPDESTOPT2(t *testing.T) {
	// A a DESTOPT extension header is inserted after the IPv6 header
	// AND after the fragmentation header. This conforms with the
	// recommended order https://datatracker.ietf.org/doc/html/rfc8200#section-4.1,
	// and is parsed ok by wireshark. However, Linux does *not* forward these
	// packets to an UDP server! So, to support this may be an overkill.
	tests := []struct {
		name     string
		input    []byte
		expected packet
	}{
		// A Neighbor Solicitation/Advertisement was captured "by
		// accident". These packets may be used for test for new
		// features.
		{
			name:  "Neighbor Solicitation",
			input: packetsUDPDESTOPT2[0],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_ICMPV6,
			},
		},
		{
			name:  "Neighbor Advertisement",
			input: packetsUDPDESTOPT2[1],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_ICMPV6,
			},
		},
		{
			name:  "UDP first-fragment with 2 DESTOPT",
			input: packetsUDPDESTOPT2[2],
			expected: packet{
				family:  v1.IPv6Protocol,
				proto:   v1.ProtocolUDP,
				ipproto: syscall.IPPROTO_UDP,
				srcIP:   net.ParseIP("fd00::c0a8:2dd"),
				dstIP:   net.ParseIP("fd00::c0a8:101"),
				dstPort: 8777,
			},
		},
		{
			name:  "UDP reply not-first fragment",
			input: packetsUDPDESTOPT2[3],
			expected: packet{
				family:  v1.IPv6Protocol,
				ipproto: syscall.IPPROTO_FRAGMENT,
				srcIP:   net.ParseIP("fd00::c0a8:2dd"),
				dstIP:   net.ParseIP("fd00::c0a8:101"),
			},
		},
	}
	for _, tc := range tests {
		packet, err := parsePacket(tc.input)
		if err != nil {
			t.Fatalf("%s: unexpected error: %v", tc.name, err)
		}
		comparePacket(t, tc.name, tc.expected, packet)
	}
}

func comparePacket(t *testing.T, tc string, expected, got packet) {
	if got.family != expected.family {
		t.Fatalf("%s: family: expected=%v, got=%v", tc, expected.family, got.family)
	}
	if got.ipproto != expected.ipproto {
		t.Fatalf("%s: ipproto: expected=%d, got=%d", tc, expected.ipproto, got.ipproto)
	}
	if expected.proto != "" {
		if got.proto != expected.proto {
			t.Fatalf("%s: proto: expected=%v, got=%v", tc, expected.proto, got.proto)
		}
	}
	// Compare other fields only if expected (never compare id and payload)
	if expected.srcIP != nil {
		if !got.srcIP.Equal(expected.srcIP) {
			t.Fatalf("%s: srcIP: expected=%v, got=%v", tc, expected.srcIP, got.srcIP)
		}
	}
	if expected.srcPort > 0 {
		if got.srcPort != expected.srcPort {
			t.Fatalf("%s: srcPort: expected=%v, got=%v", tc, expected.srcPort, got.srcPort)
		}
	}
	if expected.dstIP != nil {
		if !got.dstIP.Equal(expected.dstIP) {
			t.Fatalf("%s: dstIP: expected=%v, got=%v", tc, expected.dstIP, got.dstIP)
		}
	}
	if expected.dstPort > 0 {
		if got.dstPort != expected.dstPort {
			t.Fatalf("%s: dstPort: expected=%v, got=%v", tc, expected.dstPort, got.dstPort)
		}
	}
}

// pcap2go -cap 128 -variable packetsUDPFragIPv6 test-data/udp.pcap
var packetsUDPFragIPv6 = [][]byte{
	{
		0x60, 0x03, 0x65, 0x59, 0x05, 0x50, 0x2c, 0x40, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0xc9, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x11, 0x00, 0x00, 0x01, 0x97, 0x8d, 0xe1, 0x69,
		0xdd, 0xae, 0x13, 0x89, 0x07, 0x11, 0x6c, 0xec, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
		0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
	},
	{
		0x60, 0x03, 0x65, 0x59, 0x01, 0xd1, 0x2c, 0x40, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0xc9, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x11, 0x00, 0x05, 0x48, 0x97, 0x8d, 0xe1, 0x69,
		0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
		0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
		0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
	},
	{
		0x60, 0x03, 0x53, 0x6d, 0x00, 0x0e, 0x11, 0x40, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0xc9, 0x13, 0x89, 0xdd, 0xae, 0x00, 0x0e, 0x7e, 0x3c,
		0x76, 0x6d, 0x2d, 0x30, 0x30, 0x31,
	},
}

// pcap2go -cap 128 -variable packetsTCPIPv4 test-data/tcp-ipv4.pcap
var packetsTCPIPv4 = [][]byte{
	{
		0x45, 0x00, 0x00, 0x3c, 0x83, 0x11, 0x40, 0x00, 0x40, 0x06, 0x33, 0x90, 0xc0, 0xa8, 0x01, 0xc9,
		0xc0, 0xa8, 0x01, 0x01, 0xb6, 0xe2, 0x13, 0x89, 0x7f, 0x41, 0x17, 0x6c, 0x00, 0x00, 0x00, 0x00,
		0xa0, 0x02, 0xfa, 0xf0, 0x84, 0x49, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
		0x12, 0x20, 0x68, 0xba, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x06,
	},
	{
		0x45, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x40, 0x00, 0x40, 0x06, 0xb6, 0xa1, 0xc0, 0xa8, 0x01, 0x01,
		0xc0, 0xa8, 0x01, 0xc9, 0x13, 0x89, 0xb6, 0xe2, 0x5f, 0x14, 0x6e, 0xe6, 0x7f, 0x41, 0x17, 0x6d,
		0xa0, 0x12, 0xfe, 0x88, 0x84, 0x49, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
		0x66, 0xb2, 0x32, 0xe0, 0x12, 0x20, 0x68, 0xba, 0x01, 0x03, 0x03, 0x07,
	},
	{
		0x45, 0x00, 0x00, 0x34, 0x83, 0x12, 0x40, 0x00, 0x40, 0x06, 0x33, 0x97, 0xc0, 0xa8, 0x01, 0xc9,
		0xc0, 0xa8, 0x01, 0x01, 0xb6, 0xe2, 0x13, 0x89, 0x7f, 0x41, 0x17, 0x6d, 0x5f, 0x14, 0x6e, 0xe7,
		0x80, 0x10, 0x03, 0xec, 0x84, 0x41, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x12, 0x20, 0x68, 0xbb,
		0x66, 0xb2, 0x32, 0xe0,
	},
	{
		0x45, 0x00, 0x00, 0x3a, 0x17, 0xbf, 0x40, 0x00, 0x40, 0x06, 0x9e, 0xe4, 0xc0, 0xa8, 0x01, 0x01,
		0xc0, 0xa8, 0x01, 0xc9, 0x13, 0x89, 0xb6, 0xe2, 0x5f, 0x14, 0x6e, 0xe7, 0x7f, 0x41, 0x17, 0x6d,
		0x80, 0x18, 0x01, 0xfe, 0x84, 0x47, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x66, 0xb2, 0x32, 0xe1,
		0x12, 0x20, 0x68, 0xbb, 0x76, 0x6d, 0x2d, 0x30, 0x30, 0x31,
	},
	{
		0x45, 0x00, 0x00, 0x34, 0x83, 0x13, 0x40, 0x00, 0x40, 0x06, 0x33, 0x96, 0xc0, 0xa8, 0x01, 0xc9,
		0xc0, 0xa8, 0x01, 0x01, 0xb6, 0xe2, 0x13, 0x89, 0x7f, 0x41, 0x17, 0x6d, 0x5f, 0x14, 0x6e, 0xed,
		0x80, 0x10, 0x03, 0xec, 0x84, 0x41, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x12, 0x20, 0x68, 0xbc,
		0x66, 0xb2, 0x32, 0xe1,
	},
	{
		0x45, 0x00, 0x00, 0x34, 0x83, 0x14, 0x40, 0x00, 0x40, 0x06, 0x33, 0x95, 0xc0, 0xa8, 0x01, 0xc9,
		0xc0, 0xa8, 0x01, 0x01, 0xb6, 0xe2, 0x13, 0x89, 0x7f, 0x41, 0x17, 0x6d, 0x5f, 0x14, 0x6e, 0xed,
		0x80, 0x11, 0x03, 0xec, 0x84, 0x41, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x12, 0x20, 0x68, 0xbc,
		0x66, 0xb2, 0x32, 0xe1,
	},
	{
		0x45, 0x00, 0x00, 0x34, 0x17, 0xc0, 0x40, 0x00, 0x40, 0x06, 0x9e, 0xe9, 0xc0, 0xa8, 0x01, 0x01,
		0xc0, 0xa8, 0x01, 0xc9, 0x13, 0x89, 0xb6, 0xe2, 0x5f, 0x14, 0x6e, 0xed, 0x7f, 0x41, 0x17, 0x6e,
		0x80, 0x11, 0x01, 0xfe, 0x84, 0x41, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x66, 0xb2, 0x32, 0xe1,
		0x12, 0x20, 0x68, 0xbc,
	},
	{
		0x45, 0x00, 0x00, 0x34, 0x83, 0x15, 0x40, 0x00, 0x40, 0x06, 0x33, 0x94, 0xc0, 0xa8, 0x01, 0xc9,
		0xc0, 0xa8, 0x01, 0x01, 0xb6, 0xe2, 0x13, 0x89, 0x7f, 0x41, 0x17, 0x6e, 0x5f, 0x14, 0x6e, 0xee,
		0x80, 0x10, 0x03, 0xec, 0x84, 0x41, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x12, 0x20, 0x68, 0xbc,
		0x66, 0xb2, 0x32, 0xe1,
	},
}

// pcap2go -cap 128 -variable packetsUDPDESTOPT1 test-data/udp-dstopt1.pcap
var packetsUDPDESTOPT1 = [][]byte{
	{
		0x60, 0x04, 0x14, 0x79, 0x05, 0x60, 0x3c, 0x3e, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x2c, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
		0x1f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x01, 0xd5, 0x56, 0x83, 0x3c,
		0xed, 0xbb, 0x17, 0x70, 0x07, 0xd8, 0x6b, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x60, 0x04, 0x14, 0x79, 0x02, 0xa8, 0x3c, 0x3e, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x2c, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
		0x1f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x05, 0x48, 0xd5, 0x56, 0x83, 0x3c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x60, 0x0d, 0x99, 0x6a, 0x05, 0xb0, 0x2c, 0x40, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0x11, 0x00, 0x00, 0x01, 0x9b, 0x02, 0x0c, 0xf5,
		0x17, 0x70, 0xed, 0xbb, 0x07, 0xd8, 0x6b, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x60, 0x0d, 0x99, 0x6a, 0x02, 0x38, 0x2c, 0x40, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0x11, 0x00, 0x05, 0xa8, 0x9b, 0x02, 0x0c, 0xf5,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
}
var packetsUDPDESTOPT2 = [][]byte{
	{
		0x60, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3a, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0xff, 0xfe, 0x01, 0x01, 0xc9, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0xff, 0xa8, 0x01, 0x01, 0x87, 0x00, 0xb6, 0x36, 0x00, 0x00, 0x00, 0x00,
		0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01,
		0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0xc9,
	},
	{
		0x60, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3a, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0xff, 0xfe, 0x01, 0x01, 0xc9, 0x88, 0x00, 0x96, 0x01, 0x60, 0x00, 0x00, 0x00,
		0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01,
		0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
	},
	{
		0x60, 0x05, 0x69, 0x5c, 0x05, 0x70, 0x3c, 0x3e, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x2c, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
		0x1e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x38, 0x06, 0xae, 0xa8,
		0x11, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x1e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc7, 0x8b, 0x22, 0x49, 0x07, 0xd8, 0x87, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x60, 0x05, 0x69, 0x5c, 0x02, 0xa8, 0x3c, 0x3e, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xdd, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x01, 0x2c, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
		0x1e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x05, 0x58, 0x38, 0x06, 0xae, 0xa8,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
}
