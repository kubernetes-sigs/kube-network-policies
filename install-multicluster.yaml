# This manifest provides an example of how to deploy the kube-ip-tracker
# in a multi-cluster configuration. It uses a Secret to store the kubeconfig
# files for the remote clusters and mounts them into a directory that the
# tracker monitors.
# It also deploys the network policy agent.
---
# 1. Secret containing the kubeconfig files for all clusters in the mesh.
#    Each key in the `data` field should be a filename (e.g., cluster-one.yaml).
#    The value is the base64 encoded content of the corresponding kubeconfig file.
#
#    You can create this secret from existing files using a command like:
#    kubectl create secret generic remote-kubeconfigs \
#      --from-file=cluster-one.yaml=/path/to/your/cluster-one.yaml \
#      --from-file=cluster-two.yaml=/path/to/your/cluster-two.yaml \
#      -n kube-system
#
# apiVersion: v1
# kind: Secret
# metadata:
#   name: remote-kubeconfigs
#   namespace: kube-system
# type: Opaque
# data:
#   cluster-one.yaml: base64-encoded-kubeconfig
#   cluster-two.yaml: base64-encoded-kubeconfig

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-ip-tracker
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
      - namespaces
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-ip-tracker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-ip-tracker
subjects:
- kind: ServiceAccount
  name: kube-ip-tracker
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-ip-tracker
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: kube-ip-tracker
  namespace: kube-system
spec:
  clusterIP: None
  selector:
    app: kube-ip-tracker
  ports:
  - name: grpc
    port: 10999
    targetPort: 10999
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-ip-tracker
  namespace: kube-system
  labels:
    app: kube-ip-tracker
    k8s-app: kube-ip-tracker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kube-ip-tracker
  template:
    metadata:
      labels:
        app: kube-ip-tracker
        k8s-app: kube-ip-tracker
    spec:
      hostNetwork: true # do not depend on the network of the cluster
      serviceAccountName: kube-ip-tracker
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      volumes:
      - name: remote-kubeconfigs
        secret:
          secretName: remote-kubeconfigs
      containers:
      - name: kube-ip-tracker
        image: registry.k8s.io/networking/kube-ip-tracker:v0.1.0-multicluster
        args:
        - /bin/kube-ip-tracker
        - --listen-address=http://0.0.0.0:10999
        - --v=2
        - --kubeconfig-dir=/etc/kubernetes/kubeconfig
        ports:
        - containerPort: 10999
          name: grpc
        volumeMounts:
        - name: remote-kubeconfigs
          mountPath: /etc/kubernetes/kubeconfig
          readOnly: true
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-network-policies
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
     - "networking.k8s.io"
    resources:
      - networkpolicies
    verbs:
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-network-policies
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-network-policies
subjects:
- kind: ServiceAccount
  name: kube-network-policies
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-network-policies
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-network-policies
  namespace: kube-system
  labels:
    tier: node
    app: kube-network-policies
    k8s-app: kube-network-policies
spec:
  selector:
    matchLabels:
      app: kube-network-policies
  template:
    metadata:
      labels:
        tier: node
        app: kube-network-policies
        k8s-app: kube-network-policies
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: kube-network-policies
      containers:
      - name: kube-network-policies
        image: registry.k8s.io/networking/kube-network-policies:v0.8.0-iptracker
        args:
        - /bin/netpol
        - --hostname-override=$(MY_NODE_NAME)
        - --v=2
        - --nfqueue-id=198
        - --ip-tracker-address=kube-ip-tracker.kube-system.svc.cluster.local:10999
        volumeMounts:
        - name: nri-plugin
          mountPath: /var/run/nri
        - name: netns
          mountPath: /var/run/netns
          mountPropagation: HostToContainer
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
          capabilities:
            add: ["NET_ADMIN"]
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      volumes:
      - name: nri-plugin
        hostPath:
          path: /var/run/nri
      - name: netns
        hostPath:
          path: /var/run/netns
---
